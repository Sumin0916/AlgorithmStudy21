import sys
input=sys.stdin.readline
n,m=map(int,input().split())

graph=[[] for _ in range(n+1)]

for i in range(m):
    a,b=map(int,input().split())
    graph[a].append([b,0])
    graph[b].append([a,1])


def dfs(x):
    global cnt
    for i in graph[x]:
        if i[1]==1:
            cnt+=1
            dfs(i[0])
    return cnt

result=[]
max_num=0
for i in range(1,n+1):
    cnt=0
    num=dfs(i)
    if num>max_num:
        max_num=num
        result=[]
        result.append(i)
    elif num==max_num:
        result.append(i)

for a in result:
    print(a,end=' ')
    
    
-------------------------------------------------
DFS로 풀어봤는데 시간초과 발생 아마 재귀 깊이가 너무 깊어서 그런거 같다...bfs로 풀어보자!!




from collections import defaultdict, deque
import sys
input=sys.stdin.readline
n,m=map(int,input().split())

graph=defaultdict(list)
for i in range(m):
    a,b=map(int,input().split())
    graph[b].append(a)


def bfs(x):
    cnt=0
    pos=deque([x])
    visited=[0]*(n+1)
    visited[x]=1
    while pos:
        num=pos.popleft()
        for i in graph[num]:
            if visited[i]==0:
                visited[i]=1
                pos.append(i)
                cnt+=1
    return cnt

result=[]

for i in range(1,n+1):
    result.append([bfs(i),i])

result.sort(key=lambda x:(-x[0],x[1]))
max_num=result[0][0]

for a,b in result:
    if a==max_num:
        print(b,end=' ')


시간초과만 한 10번 제출한듯.....
그래프를 양방향 그래프로 하니까 시간을 잡아먹는 것 같다... omg
    
    
  
