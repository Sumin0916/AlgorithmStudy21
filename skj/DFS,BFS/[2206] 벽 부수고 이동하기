from collections import deque
import sys
n,m=map(int,sys.stdin.readline().split())
graph=[]
for _ in range(n):
    graph.append(list(sys.stdin.readline()))


pos=deque()
flag=0
pos.append((0,0,1,flag))

dx=[-1,1,0,0]
dy=[0,0,-1,1]
test=False
num=n*m

while pos:
    x,y,count,flag=pos.popleft()
    graph[x][y]=2
    if x==n-1 and y==m-1:
        test=True
        if num>count:
            num=count
    for i in range(4):
        nx=x+dx[i]
        ny=y+dy[i]
        if 0<=nx<n and 0<=ny<m:
            if graph[nx][ny]=='0':
                pos.append((nx,ny,count+1,flag))
            elif graph[nx][ny]=='1':
                if flag==0:
                    pos.append((nx,ny,count+1,1))
                else:
                    continue
if test:
    print(num)
else:
    print(-1)
    
------------------------------------------------
시간초과 발생...  bfs의 시간 복잡도 때문에 발생하는 것 같다. 이를 해결하기 위해서는 3차원 배열을 사용해야하는 것 같다..!!




from collections import deque
import sys
n,m=map(int,sys.stdin.readline().split())
graph=[]

for _ in range(n):
    graph.append(list(sys.stdin.readline()))

visited=[[[0]*2 for _ in range(m)] for _ in range(n)]

pos=deque()
pos.append((0,0,1))
visited[0][0][1]=1


dx=[-1,1,0,0]
dy=[0,0,-1,1]
test=False
num=0

while pos:
    x,y,w = pos.popleft()
    if x==n-1 and y==m-1:
        test=True
        break
    for i in range(4):
        nx=x+dx[i]
        ny=y+dy[i]
        if 0<=nx<n and 0<=ny<m:
            if graph[nx][ny] == '1' and w == 1:
                visited[nx][ny][0] = visited[x][y][1] + 1
                pos.append((nx, ny, 0))
            elif graph[nx][ny] == '0' and visited[nx][ny][w] == 0:
                visited[nx][ny][w] = visited[x][y][w] + 1
                pos.append((nx, ny, w))


if test:
    print(visited[n-1][m-1][w])
else:
    print(-1)
    
    
3차원 배열로 해결 기존 bfs는 모든 방향을 탐색해서 시간이 너무 많이 걸리는듯 ..
pypy3로 제출하니까 통과..
