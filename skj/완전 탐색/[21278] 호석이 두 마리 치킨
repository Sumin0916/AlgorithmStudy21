from itertools import combinations
from collections import deque
import sys
input=sys.stdin.readline
n,m=map(int,input().split())

num=[i for i in range(1,n+1)]

temp=list(combinations(num,2))

graph=[[] for _ in range(n+1)]
for _ in range(m):
    a,b=map(int,input().split())
    graph[a].append(b)
    graph[b].append(a)

def bfs(a,x,y):
    q=deque()
    q.append((a,0))
    while q:
        num,cnt=q.popleft()
        if num==x or num==y:
            return cnt*2
        for j in graph[num]:
            q.append((j,cnt+1))
   
result=[]
for x,y in temp:
    answer=0
    for i in range(1,n+1):
        if i==x or i==y:
            continue
        else:
            answer+=bfs(i,x,y)
    result.append((answer,x,y))
a,b,c=min(result)
print(b,c,a)

------------------------------------------------
시간초과 발생 코드 다른 알고리즘이 필요한 것 같군

import sys
from math import inf
input = sys.stdin.readline
N, M = map(int,input().split())
cost = [[inf] * N for _ in range(N)]
for _ in range(M):
	a,b = map(int,input().split())
	cost[a-1][b-1] = 1
	cost[b-1][a-1] = 1
for k in range(N):
	cost[k][k] = 0
	for i in range(N):
		for j in range(N):
			cost[i][j] = min(cost[i][j], cost[i][k] + cost[k][j])
 
max = 1000000000
for i in range(N-1):
	for j in range(1, N):
		sum = 0
		for k in range(N):
			sum += min(cost[k][i], cost[k][j])
		if max > sum * 2:
			max = 2 * sum
			dab = [i+1, j+1, 2*sum]
print(*dab)

플로이드 워셜 알고리즘으로 해결하긴 했는데 
bfs로도 해결하는데 왜 내 코드는 시간초과가 나는 것인가..
