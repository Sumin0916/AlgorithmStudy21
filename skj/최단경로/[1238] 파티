import heapq,sys
input=sys.stdin.readline
INF=int(1e9)
n,m,x=map(int,input().split())

graph=[[] for _ in range(n+1)]

for _ in range(m):
    start,end,dist=map(int,input().split())
    graph[start].append((end,dist))


def dijkstra(start,target):
    q=[]
    distance=[INF]*(n+1)
    distance[start]=0
    heapq.heappush(q,(start,0))
    while q:
        node,dist=heapq.heappop(q)
        for now,d in graph[node]:
            cost=dist+d
            if cost<distance[now]:
                distance[now]=cost
                heapq.heappush(q,(now,cost))
    return distance

answer=-1
result=[[]]
for i in range(1,n+1):
    num=dijkstra(i,x)
    result.append(num)

for j in range(1,n+1):
    temp=result[j][x]+result[x][j]
    if temp>answer:
        answer=temp
print(answer)
