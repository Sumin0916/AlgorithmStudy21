import sys,heapq
INF=int(1e9)
input=sys.stdin.readline

t=int(input())

for _ in range(t):
    n,d,c=map(int,input().split())
    graph=[[] for _ in range(n+1)]
    for _ in range(d):
        start,end,dist=map(int,input().split())
        graph[end].append((start,dist))


    def digkstra(start):
        distance=[INF]*(n+1)
        distance[start]=0
        q=[]
        heapq.heappush(q,(start,0))
        while q:
            node,dist=heapq.heappop(q)
            for now,d in graph[node]:
                cost=dist+d
                if cost<distance[now]:
                    distance[now]=cost
                    heapq.heappush(q,(now,cost))
        return distance
    
    result=digkstra(c)
    max_num=0
    cnt=0
    for r in range(1,n+1):
        if result[r]!=INF:
            cnt+=1
            if result[r]>max_num:
                max_num=result[r]
    print(cnt,max_num)
