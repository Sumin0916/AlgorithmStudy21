import heapq,sys
input=sys.stdin.readline
v,e=map(int,input().split())
start=int(input())

INF=int(1e9)

distance=[INF]*(v+1)
distance[start]=0
graph=[[] for _ in range(v+1)]

for _ in range(e):
    a,b,c=map(int,input().split())
    graph[a].append((b,c))


def dijkstra(start):
    q=[]
    heapq.heappush(q,(0,start))  #간선 거리와 노드 번호
    while q:
        dist,node=heapq.heappop(q)
        if dist>distance[node]:
            continue
        for num in graph[node]:
            cost=dist+num[1]
            if cost<distance[num[0]]:
                distance[num[0]]=cost
                heapq.heappush(q,(cost,num[0]))

dijkstra(start)
for d in range(1,v+1):
    if distance[d]==INF:
        print('INF')
    else:
        print(distance[d])
